// SPDX-License-Identifier: MIT
pragma solidity ^0.8.30;

import "@openzeppelin/contracts/token/ERC20/IERC20.sol";
import "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import "@openzeppelin/contracts/security/ReentrancyGuard.sol";
import "@openzeppelin/contracts/security/Pausable.sol";
import "@openzeppelin/contracts/access/AccessControl.sol";

/**
 * @title HBTStaking
 * @dev A secure contract for staking HBT tokens, offering tiered rewards based on lock-up duration.
 * This contract incorporates features like role separation for enhanced security and robust withdrawal logic.
 */
contract HBTStaking is ReentrancyGuard, Pausable, AccessControl {
    using SafeERC20 for IERC20;

    // --- Roles ---
    bytes32 public constant ADMIN_ROLE = keccak256("ADMIN_ROLE");
    bytes32 public constant EMERGENCY_ROLE = keccak256("EMERGENCY_ROLE");
    bytes32 public constant REWARD_MANAGER_ROLE = keccak256("REWARD_MANAGER_ROLE");

    // --- Token and Policies ---
    IERC20 public immutable HBTToken = IERC20(0x37D271bFaA99A89bbbF23c6751199BcB0940C382);

    uint256 public constant MIN_STAKE_AMOUNT = 50000 * 10**18;
    uint256 public constant MAX_STAKE_AMOUNT = 75000000 * 10**18;
    uint256 public constant MIN_STAKING_PERIOD = 14 days;
    uint256 public constant WITHDRAWAL_DELAY = 8 hours;
    uint256 public constant DAILY_WITHDRAWAL_LIMIT = 50000000 * 10**18;
    uint256 public constant SECONDS_PER_DAY = 86400;
    uint256 public constant BASE_APY = 109; // Represents 10.9%

    // --- State Variables ---
    uint256 public totalStaked;
    uint256 public rewardPool;

    struct StakeInfo {
        uint256 amount;
        uint256 startTime;
        uint256 lastRewardTime;
        uint256 pendingRewards;
        bool isWithdrawing;
        uint256 withdrawalRequestTime;
        uint256 dailyWithdrawnAmount;
        uint256 lastDailyReset;
    }

    mapping(address => StakeInfo) public stakes;

    // --- Events ---
    event Staked(address indexed user, uint256 amount, uint256 timestamp);
    event WithdrawalRequested(address indexed user, uint256 amount, uint256 timestamp);
    event Withdrawn(address indexed user, uint256 amount, uint256 rewards, uint256 timestamp);
    event RewardsClaimed(address indexed user, uint256 rewards, uint256 timestamp);
    event EmergencyWithdrawn(address indexed user, uint256 amount, uint256 rewards, address indexed admin, uint256 timestamp);
    event RewardsDeposited(address indexed admin, uint256 amount, uint256 timestamp);
    event RewardsWithdrawn(address indexed admin, uint256 amount, uint256 timestamp);

    constructor() {
        _grantRole(DEFAULT_ADMIN_ROLE, msg.sender);
        _grantRole(ADMIN_ROLE, msg.sender);
        _grantRole(EMERGENCY_ROLE, msg.sender);
        _grantRole(REWARD_MANAGER_ROLE, msg.sender);
    }

    // --- Reward Logic ---

    function getDynamicAPY(uint256 stakingDuration) internal pure returns (uint256) {
        if (stakingDuration >= 365 days) return 189; // 18.9%
        if (stakingDuration >= 180 days) return 149; // 14.9%
        if (stakingDuration >= 90 days) return 129; // 12.9%
        return BASE_APY; // 10.9%
    }

    function calculateRewards(address _user) public view returns (uint256) {
        StakeInfo memory stakeInfo = stakes[_user];
        if (stakeInfo.amount == 0) return 0;

        uint256 timeElapsed;
        if (stakeInfo.isWithdrawing) {
            timeElapsed = stakeInfo.withdrawalRequestTime - stakeInfo.lastRewardTime;
        } else {
            timeElapsed = block.timestamp - stakeInfo.lastRewardTime;
        }
        
        if (block.timestamp - stakeInfo.startTime < MIN_STAKING_PERIOD) {
            return 0;
        }

        uint256 stakingDuration = block.timestamp - stakeInfo.startTime;
        uint256 currentAPY = getDynamicAPY(stakingDuration);
        
        uint256 rewards = (stakeInfo.amount * currentAPY * timeElapsed) / (365 days) / 1000;
        
        return stakeInfo.pendingRewards + rewards;
    }

    // --- Core User Functions ---

    function stake(uint256 _amount) external nonReentrant whenNotPaused {
        require(_amount >= MIN_STAKE_AMOUNT, "Amount is below the minimum");
        require(_amount <= MAX_STAKE_AMOUNT, "Amount is above the maximum");
        require(stakes[msg.sender].amount == 0, "An active stake already exists");
        
        HBTToken.safeTransferFrom(msg.sender, address(this), _amount);

        stakes[msg.sender] = StakeInfo({
            amount: _amount,
            startTime: block.timestamp,
            lastRewardTime: block.timestamp,
            pendingRewards: 0,
            isWithdrawing: false,
            withdrawalRequestTime: 0,
            dailyWithdrawnAmount: 0,
            lastDailyReset: block.timestamp
        });

        totalStaked += _amount;
        emit Staked(msg.sender, _amount, block.timestamp);
    }

    function claimRewards() external nonReentrant whenNotPaused {
        StakeInfo storage stakeInfo = stakes[msg.sender];
        require(!stakeInfo.isWithdrawing, "Cannot claim rewards while withdrawal is pending");
        _claimRewards();
    }
    
    function requestWithdrawal() external nonReentrant whenNotPaused {
        StakeInfo storage stakeInfo = stakes[msg.sender];
        require(stakeInfo.amount > 0, "No stake found");
        require(!stakeInfo.isWithdrawing, "Withdrawal already requested");
        require(block.timestamp >= stakeInfo.startTime + MIN_STAKING_PERIOD, "Minimum staking period not met");

        uint256 rewards = calculateRewards(msg.sender);
        
        stakeInfo.isWithdrawing = true;
        stakeInfo.withdrawalRequestTime = block.timestamp;
        stakeInfo.pendingRewards = rewards;
        stakeInfo.lastRewardTime = block.timestamp;

        emit WithdrawalRequested(msg.sender, stakeInfo.amount, block.timestamp);
    }
    
    function withdraw() external nonReentrant whenNotPaused {
        StakeInfo storage stakeInfo = stakes[msg.sender];
        require(stakeInfo.isWithdrawing, "No withdrawal requested");
        require(block.timestamp >= stakeInfo.withdrawalRequestTime + WITHDRAWAL_DELAY, "Withdrawal delay not met");

        _resetDailyWithdrawalIfNeeded(stakeInfo);
        
        uint256 amount = stakeInfo.amount;
        uint256 rewards = stakeInfo.pendingRewards;
        uint256 totalWithdrawalAmount = amount + rewards;

        require(stakeInfo.dailyWithdrawnAmount + totalWithdrawalAmount <= DAILY_WITHDRAWAL_LIMIT, "Daily withdrawal limit exceeded");
        
        require(HBTToken.balanceOf(address(this)) >= totalWithdrawalAmount, "Insufficient contract balance");
        require(rewardPool >= rewards, "Insufficient rewards in pool");
        
        if (rewards > 0) {
            rewardPool -= rewards;
        }

        stakeInfo.dailyWithdrawnAmount += totalWithdrawalAmount;

        totalStaked -= amount;
        
        address user = msg.sender;
        delete stakes[user];
        HBTToken.safeTransfer(user, totalWithdrawalAmount);

        emit Withdrawn(user, amount, rewards, block.timestamp);
    }

    // --- Admin Functions ---

    function depositRewards(uint256 _amount) external onlyRole(REWARD_MANAGER_ROLE) {
        require(_amount > 0, "Amount must be greater than zero");
        HBTToken.safeTransferFrom(msg.sender, address(this), _amount);
        rewardPool += _amount;
        emit RewardsDeposited(msg.sender, _amount, block.timestamp);
    }

    function withdrawRewards(uint256 _amount) external onlyRole(REWARD_MANAGER_ROLE) {
        require(_amount > 0, "Amount must be greater than zero");
        require(rewardPool >= _amount, "Cannot withdraw more than available in reward pool");

        uint256 contractBalance = HBTToken.balanceOf(address(this));
        require(contractBalance - _amount >= totalStaked, "Withdrawal would deplete principal");
        
        rewardPool -= _amount;
        HBTToken.safeTransfer(msg.sender, _amount);
        emit RewardsWithdrawn(msg.sender, _amount, block.timestamp);
    }

    function emergencyWithdraw(address _user) external onlyRole(EMERGENCY_ROLE) {
        StakeInfo storage stakeInfo = stakes[_user];
        require(stakeInfo.amount > 0, "No stake found for the user");

        uint256 amount = stakeInfo.amount;
        uint256 rewards;
        
        if (stakeInfo.isWithdrawing) {
            rewards = stakeInfo.pendingRewards;
        } else {
            rewards = calculateRewards(_user);
        }

        uint256 totalWithdrawalAmount = amount + rewards;

        require(HBTToken.balanceOf(address(this)) >= totalWithdrawalAmount, "Insufficient contract balance");
        require(rewardPool >= rewards, "Insufficient rewards in pool");
        
        if (rewards > 0) {
            rewardPool -= rewards;
        }
        
        totalStaked -= amount;
        delete stakes[_user];
        HBTToken.safeTransfer(_user, totalWithdrawalAmount);

        emit EmergencyWithdrawn(_user, amount, rewards, msg.sender, block.timestamp);
    }

    function pause() external onlyRole(ADMIN_ROLE) {
        _pause();
    }

    function unpause() external onlyRole(ADMIN_ROLE) {
        _unpause();
    }
    
    // --- View Functions ---

    function getTotalStaked() public view returns (uint256) {
        return totalStaked;
    }
    
    function getRewardPoolBalance() public view returns (uint256) {
        return rewardPool;
    }

    // --- Internal Functions ---

    function _claimRewards() internal {
        uint256 rewards = calculateRewards(msg.sender);
        require(rewards > 0, "No rewards to claim");
        require(rewardPool >= rewards, "Insufficient rewards in pool");

        rewardPool -= rewards;

        stakes[msg.sender].pendingRewards = 0;
        stakes[msg.sender].lastRewardTime = block.timestamp;

        HBTToken.safeTransfer(msg.sender, rewards);
        emit RewardsClaimed(msg.sender, rewards, block.timestamp);
    }

    function _resetDailyWithdrawalIfNeeded(StakeInfo storage stakeInfo) internal {
        uint256 currentDay = block.timestamp / SECONDS_PER_DAY;
        uint256 lastResetDay = stakeInfo.lastDailyReset / SECONDS_PER_DAY;
        
        if (currentDay > lastResetDay) {
            stakeInfo.dailyWithdrawnAmount = 0;
            stakeInfo.lastDailyReset = block.timestamp;
        }
    }

    // --- Role Management ---
    
    function grantRewardManagerRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _grantRole(REWARD_MANAGER_ROLE, account);
    }

    function revokeRewardManagerRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _revokeRole(REWARD_MANAGER_ROLE, account);
    }

    function grantEmergencyRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _grantRole(EMERGENCY_ROLE, account);
    }

    function revokeEmergencyRole(address account) external onlyRole(DEFAULT_ADMIN_ROLE) {
        _revokeRole(EMERGENCY_ROLE, account);
    }
}
